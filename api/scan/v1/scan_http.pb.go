// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.21.6
// source: scan/v1/scan.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationScanGetScanRepositoryResult = "/scan.v1.Scan/GetScanRepositoryResult"
const OperationScanScanRepository = "/scan.v1.Scan/ScanRepository"

type ScanHTTPServer interface {
	GetScanRepositoryResult(context.Context, *GetScanRepositoryResultRequest) (*GetScanRepositoryResultResponse, error)
	ScanRepository(context.Context, *ScanRepositoryRequest) (*ScanRepositoryResponse, error)
}

func RegisterScanHTTPServer(s *http.Server, srv ScanHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/scan", _Scan_ScanRepository0_HTTP_Handler(srv))
	r.GET("/v1/scan/{result_id}", _Scan_GetScanRepositoryResult0_HTTP_Handler(srv))
}

func _Scan_ScanRepository0_HTTP_Handler(srv ScanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ScanRepositoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScanScanRepository)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ScanRepository(ctx, req.(*ScanRepositoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ScanRepositoryResponse)
		return ctx.Result(200, reply)
	}
}

func _Scan_GetScanRepositoryResult0_HTTP_Handler(srv ScanHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetScanRepositoryResultRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationScanGetScanRepositoryResult)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetScanRepositoryResult(ctx, req.(*GetScanRepositoryResultRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetScanRepositoryResultResponse)
		return ctx.Result(200, reply)
	}
}

type ScanHTTPClient interface {
	GetScanRepositoryResult(ctx context.Context, req *GetScanRepositoryResultRequest, opts ...http.CallOption) (rsp *GetScanRepositoryResultResponse, err error)
	ScanRepository(ctx context.Context, req *ScanRepositoryRequest, opts ...http.CallOption) (rsp *ScanRepositoryResponse, err error)
}

type ScanHTTPClientImpl struct {
	cc *http.Client
}

func NewScanHTTPClient(client *http.Client) ScanHTTPClient {
	return &ScanHTTPClientImpl{client}
}

func (c *ScanHTTPClientImpl) GetScanRepositoryResult(ctx context.Context, in *GetScanRepositoryResultRequest, opts ...http.CallOption) (*GetScanRepositoryResultResponse, error) {
	var out GetScanRepositoryResultResponse
	pattern := "/v1/scan/{result_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationScanGetScanRepositoryResult))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ScanHTTPClientImpl) ScanRepository(ctx context.Context, in *ScanRepositoryRequest, opts ...http.CallOption) (*ScanRepositoryResponse, error) {
	var out ScanRepositoryResponse
	pattern := "/v1/scan"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationScanScanRepository))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
