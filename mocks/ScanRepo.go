// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	biz "backend/internal/biz"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	time "time"
)

// ScanRepo is an autogenerated mock type for the ScanRepo type
type ScanRepo struct {
	mock.Mock
}

// CreateScan provides a mock function with given fields: ctx, repoID
func (_m *ScanRepo) CreateScan(ctx context.Context, repoID uint64) (*biz.Scan, *sql.Tx, error) {
	ret := _m.Called(ctx, repoID)

	var r0 *biz.Scan
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *biz.Scan); ok {
		r0 = rf(ctx, repoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.Scan)
		}
	}

	var r1 *sql.Tx
	if rf, ok := ret.Get(1).(func(context.Context, uint64) *sql.Tx); ok {
		r1 = rf(ctx, repoID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*sql.Tx)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, uint64) error); ok {
		r2 = rf(ctx, repoID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetScan provides a mock function with given fields: ctx, scanID
func (_m *ScanRepo) GetScan(ctx context.Context, scanID uint64) (*biz.Scan, error) {
	ret := _m.Called(ctx, scanID)

	var r0 *biz.Scan
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *biz.Scan); ok {
		r0 = rf(ctx, scanID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.Scan)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, scanID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScanFindings provides a mock function with given fields: ctx, scanID, findings
func (_m *ScanRepo) UpdateScanFindings(ctx context.Context, scanID uint64, findings string) (*biz.ScanUpdate, error) {
	ret := _m.Called(ctx, scanID, findings)

	var r0 *biz.ScanUpdate
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) *biz.ScanUpdate); ok {
		r0 = rf(ctx, scanID, findings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.ScanUpdate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint64, string) error); ok {
		r1 = rf(ctx, scanID, findings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScanStartAndEndTimeWithFailure provides a mock function with given fields: ctx, scanID, startTime, endTime
func (_m *ScanRepo) UpdateScanStartAndEndTimeWithFailure(ctx context.Context, scanID uint64, startTime time.Time, endTime time.Time) error {
	ret := _m.Called(ctx, scanID, startTime, endTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, time.Time, time.Time) error); ok {
		r0 = rf(ctx, scanID, startTime, endTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateScanStartAndEndTimeWithSuccess provides a mock function with given fields: ctx, scanID, startTime, endTime
func (_m *ScanRepo) UpdateScanStartAndEndTimeWithSuccess(ctx context.Context, scanID uint64, startTime time.Time, endTime time.Time) error {
	ret := _m.Called(ctx, scanID, startTime, endTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, time.Time, time.Time) error); ok {
		r0 = rf(ctx, scanID, startTime, endTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateScanStartTimeAndTotalFiles provides a mock function with given fields: ctx, scanID, startTime, totalFiles
func (_m *ScanRepo) UpdateScanStartTimeAndTotalFiles(ctx context.Context, scanID uint64, startTime time.Time, totalFiles uint32) error {
	ret := _m.Called(ctx, scanID, startTime, totalFiles)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, time.Time, uint32) error); ok {
		r0 = rf(ctx, scanID, startTime, totalFiles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateScanWithSuccess provides a mock function with given fields: ctx, scanID, endTime
func (_m *ScanRepo) UpdateScanWithSuccess(ctx context.Context, scanID uint64, endTime time.Time) error {
	ret := _m.Called(ctx, scanID, endTime)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, time.Time) error); ok {
		r0 = rf(ctx, scanID, endTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewScanRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewScanRepo creates a new instance of ScanRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScanRepo(t mockConstructorTestingTNewScanRepo) *ScanRepo {
	mock := &ScanRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
